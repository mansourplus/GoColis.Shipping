// <auto-generated />
using System;
using GoColis.Shipping.Infrastructure.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GoColis.Shipping.Infrastructure.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GoColis.Shipping.Domain.Authentication.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "ReadShipping"
                        },
                        new
                        {
                            Id = 2,
                            Name = "CreateShipping"
                        },
                        new
                        {
                            Id = 3,
                            Name = "UpdateShipping"
                        },
                        new
                        {
                            Id = 4,
                            Name = "DeleteShipping"
                        },
                        new
                        {
                            Id = 5,
                            Name = "ReadRelayPoint"
                        },
                        new
                        {
                            Id = 6,
                            Name = "CreateRelayPoint"
                        },
                        new
                        {
                            Id = 7,
                            Name = "UpdateRelayPoint"
                        },
                        new
                        {
                            Id = 8,
                            Name = "DeleteRelayPoint"
                        },
                        new
                        {
                            Id = 9,
                            Name = "ReadCarrier"
                        },
                        new
                        {
                            Id = 10,
                            Name = "CreateCarrier"
                        },
                        new
                        {
                            Id = 11,
                            Name = "UpdateCarrier"
                        },
                        new
                        {
                            Id = 12,
                            Name = "DeleteCarrier"
                        },
                        new
                        {
                            Id = 13,
                            Name = "ReadPerson"
                        },
                        new
                        {
                            Id = 14,
                            Name = "CreatePerson"
                        },
                        new
                        {
                            Id = 15,
                            Name = "UpdatePerson"
                        },
                        new
                        {
                            Id = 16,
                            Name = "DeletePerson"
                        });
                });

            modelBuilder.Entity("GoColis.Shipping.Domain.Authentication.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("01b71ba4-6e58-4758-97a9-f4d6d90d7eb9"),
                            Name = "Carrier",
                            NormalizedName = "CARRIER"
                        },
                        new
                        {
                            Id = new Guid("8167af27-1021-4e57-bf4c-b40dd754567f"),
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        },
                        new
                        {
                            Id = new Guid("133ff856-2792-413d-a467-3dd774c6f040"),
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        });
                });

            modelBuilder.Entity("GoColis.Shipping.Domain.Authentication.Entities.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("GoColis.Shipping.Domain.Authentication.Entities.RolePermission", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PermissionId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions", (string)null);

                    b.HasData(
                        new
                        {
                            PermissionId = 1,
                            RoleId = new Guid("133ff856-2792-413d-a467-3dd774c6f040")
                        },
                        new
                        {
                            PermissionId = 2,
                            RoleId = new Guid("133ff856-2792-413d-a467-3dd774c6f040")
                        },
                        new
                        {
                            PermissionId = 3,
                            RoleId = new Guid("133ff856-2792-413d-a467-3dd774c6f040")
                        },
                        new
                        {
                            PermissionId = 4,
                            RoleId = new Guid("133ff856-2792-413d-a467-3dd774c6f040")
                        },
                        new
                        {
                            PermissionId = 5,
                            RoleId = new Guid("133ff856-2792-413d-a467-3dd774c6f040")
                        },
                        new
                        {
                            PermissionId = 6,
                            RoleId = new Guid("133ff856-2792-413d-a467-3dd774c6f040")
                        },
                        new
                        {
                            PermissionId = 7,
                            RoleId = new Guid("133ff856-2792-413d-a467-3dd774c6f040")
                        },
                        new
                        {
                            PermissionId = 8,
                            RoleId = new Guid("133ff856-2792-413d-a467-3dd774c6f040")
                        },
                        new
                        {
                            PermissionId = 9,
                            RoleId = new Guid("133ff856-2792-413d-a467-3dd774c6f040")
                        },
                        new
                        {
                            PermissionId = 10,
                            RoleId = new Guid("133ff856-2792-413d-a467-3dd774c6f040")
                        },
                        new
                        {
                            PermissionId = 11,
                            RoleId = new Guid("133ff856-2792-413d-a467-3dd774c6f040")
                        },
                        new
                        {
                            PermissionId = 12,
                            RoleId = new Guid("133ff856-2792-413d-a467-3dd774c6f040")
                        },
                        new
                        {
                            PermissionId = 13,
                            RoleId = new Guid("133ff856-2792-413d-a467-3dd774c6f040")
                        },
                        new
                        {
                            PermissionId = 14,
                            RoleId = new Guid("133ff856-2792-413d-a467-3dd774c6f040")
                        },
                        new
                        {
                            PermissionId = 15,
                            RoleId = new Guid("133ff856-2792-413d-a467-3dd774c6f040")
                        },
                        new
                        {
                            PermissionId = 16,
                            RoleId = new Guid("133ff856-2792-413d-a467-3dd774c6f040")
                        },
                        new
                        {
                            PermissionId = 2,
                            RoleId = new Guid("8167af27-1021-4e57-bf4c-b40dd754567f")
                        },
                        new
                        {
                            PermissionId = 3,
                            RoleId = new Guid("8167af27-1021-4e57-bf4c-b40dd754567f")
                        },
                        new
                        {
                            PermissionId = 4,
                            RoleId = new Guid("8167af27-1021-4e57-bf4c-b40dd754567f")
                        },
                        new
                        {
                            PermissionId = 1,
                            RoleId = new Guid("8167af27-1021-4e57-bf4c-b40dd754567f")
                        },
                        new
                        {
                            PermissionId = 9,
                            RoleId = new Guid("8167af27-1021-4e57-bf4c-b40dd754567f")
                        },
                        new
                        {
                            PermissionId = 5,
                            RoleId = new Guid("8167af27-1021-4e57-bf4c-b40dd754567f")
                        },
                        new
                        {
                            PermissionId = 13,
                            RoleId = new Guid("8167af27-1021-4e57-bf4c-b40dd754567f")
                        },
                        new
                        {
                            PermissionId = 1,
                            RoleId = new Guid("01b71ba4-6e58-4758-97a9-f4d6d90d7eb9")
                        },
                        new
                        {
                            PermissionId = 9,
                            RoleId = new Guid("01b71ba4-6e58-4758-97a9-f4d6d90d7eb9")
                        },
                        new
                        {
                            PermissionId = 10,
                            RoleId = new Guid("01b71ba4-6e58-4758-97a9-f4d6d90d7eb9")
                        },
                        new
                        {
                            PermissionId = 11,
                            RoleId = new Guid("01b71ba4-6e58-4758-97a9-f4d6d90d7eb9")
                        },
                        new
                        {
                            PermissionId = 12,
                            RoleId = new Guid("01b71ba4-6e58-4758-97a9-f4d6d90d7eb9")
                        },
                        new
                        {
                            PermissionId = 5,
                            RoleId = new Guid("01b71ba4-6e58-4758-97a9-f4d6d90d7eb9")
                        },
                        new
                        {
                            PermissionId = 6,
                            RoleId = new Guid("01b71ba4-6e58-4758-97a9-f4d6d90d7eb9")
                        },
                        new
                        {
                            PermissionId = 7,
                            RoleId = new Guid("01b71ba4-6e58-4758-97a9-f4d6d90d7eb9")
                        },
                        new
                        {
                            PermissionId = 8,
                            RoleId = new Guid("01b71ba4-6e58-4758-97a9-f4d6d90d7eb9")
                        },
                        new
                        {
                            PermissionId = 13,
                            RoleId = new Guid("01b71ba4-6e58-4758-97a9-f4d6d90d7eb9")
                        });
                });

            modelBuilder.Entity("GoColis.Shipping.Domain.Authentication.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("GoColis.Shipping.Domain.Authentication.Entities.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("GoColis.Shipping.Domain.Authentication.Entities.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("GoColis.Shipping.Domain.Authentication.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("GoColis.Shipping.Domain.Authentication.Entities.UserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GoColis.Shipping.Domain.Common.Entities.Adress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<decimal>("Latitude")
                        .HasPrecision(30, 20)
                        .HasColumnType("decimal(30,20)");

                    b.Property<decimal>("Longitude")
                        .HasPrecision(30, 20)
                        .HasColumnType("decimal(30,20)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("StreetNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Adress", (string)null);
                });

            modelBuilder.Entity("GoColis.Shipping.Domain.Common.Entities.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<Guid?>("RelayPointId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("RelayPointId");

                    b.ToTable("Contacts", (string)null);
                });

            modelBuilder.Entity("GoColis.Shipping.Domain.Common.Entities.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Photos", (string)null);
                });

            modelBuilder.Entity("GoColis.Shipping.Domain.Logistics.Insurance.Insurance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdressId");

                    b.HasIndex("ContactId");

                    b.ToTable("Insurances", (string)null);
                });

            modelBuilder.Entity("GoColis.Shipping.Domain.Logistics.Order.Entities.Package", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ExtraInformation")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(10, 3)
                        .HasColumnType("decimal(10,3)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Packages", (string)null);
                });

            modelBuilder.Entity("GoColis.Shipping.Domain.Logistics.Order.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Process")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Track");
                });

            modelBuilder.Entity("GoColis.Shipping.Domain.Logistics.Order.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CarrierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FromPickupDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsuranceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelivered")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSender")
                        .HasColumnType("bit");

                    b.Property<bool>("IsValidated")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PaymentMethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PickupPointId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RelayPointId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ToPickupDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("WithInsurance")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CarrierId");

                    b.HasIndex("InsuranceId");

                    b.HasIndex("PackageId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("PickupPointId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("RelayPointId");

                    b.HasIndex("SenderId");

                    b.ToTable("Shipments", (string)null);
                });

            modelBuilder.Entity("GoColis.Shipping.Domain.Logistics.RelayPoint.RelayPoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdressID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CarrierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdressID");

                    b.HasIndex("CarrierId");

                    b.ToTable("RelayPoints", (string)null);
                });

            modelBuilder.Entity("GoColis.Shipping.Domain.Member.Carrier.Carrier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Carriers", (string)null);
                });

            modelBuilder.Entity("GoColis.Shipping.Domain.Member.Person.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AdressId");

                    b.HasIndex("UserId");

                    b.ToTable("Persons", (string)null);
                });

            modelBuilder.Entity("GoColis.Shipping.Domain.Payment.PaymentMethod.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CarrierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsBankTransfer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCashOnDelivery")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCreditCard")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CarrierId");

                    b.ToTable("PaymentMethods", (string)null);
                });

            modelBuilder.Entity("GoColis.Shipping.Domain.Authentication.Entities.RoleClaim", b =>
                {
                    b.HasOne("GoColis.Shipping.Domain.Authentication.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoColis.Shipping.Domain.Authentication.Entities.RolePermission", b =>
                {
                    b.HasOne("GoColis.Shipping.Domain.Authentication.Entities.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoColis.Shipping.Domain.Authentication.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoColis.Shipping.Domain.Authentication.Entities.UserClaim", b =>
                {
                    b.HasOne("GoColis.Shipping.Domain.Authentication.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoColis.Shipping.Domain.Authentication.Entities.UserLogin", b =>
                {
                    b.HasOne("GoColis.Shipping.Domain.Authentication.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoColis.Shipping.Domain.Authentication.Entities.UserRole", b =>
                {
                    b.HasOne("GoColis.Shipping.Domain.Authentication.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoColis.Shipping.Domain.Authentication.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoColis.Shipping.Domain.Authentication.Entities.UserToken", b =>
                {
                    b.HasOne("GoColis.Shipping.Domain.Authentication.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoColis.Shipping.Domain.Common.Entities.Contact", b =>
                {
                    b.HasOne("GoColis.Shipping.Domain.Member.Person.Person", null)
                        .WithMany("Contacts")
                        .HasForeignKey("PersonId");

                    b.HasOne("GoColis.Shipping.Domain.Logistics.RelayPoint.RelayPoint", null)
                        .WithMany("Contacts")
                        .HasForeignKey("RelayPointId");
                });

            modelBuilder.Entity("GoColis.Shipping.Domain.Common.Entities.Photo", b =>
                {
                    b.HasOne("GoColis.Shipping.Domain.Logistics.Order.Order", null)
                        .WithMany("Photos")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("GoColis.Shipping.Domain.Logistics.Insurance.Insurance", b =>
                {
                    b.HasOne("GoColis.Shipping.Domain.Common.Entities.Adress", "Adress")
                        .WithMany()
                        .HasForeignKey("AdressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoColis.Shipping.Domain.Common.Entities.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adress");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("GoColis.Shipping.Domain.Logistics.Order.Entities.Package", b =>
                {
                    b.OwnsMany("GoColis.Shipping.Domain.Logistics.Order.Entities.Item", "Items", b1 =>
                        {
                            b1.Property<Guid>("PackageId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)");

                            b1.Property<decimal>("Price")
                                .HasPrecision(10, 3)
                                .HasColumnType("decimal(10,3)");

                            b1.Property<int>("Quantity")
                                .HasColumnType("int");

                            b1.HasKey("PackageId", "Id");

                            b1.ToTable("PackageItems", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("PackageId");
                        });

                    b.OwnsOne("GoColis.Shipping.Domain.Logistics.Order.ValuesObjects.Format", "Format", b1 =>
                        {
                            b1.Property<Guid>("PackageId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Height")
                                .HasPrecision(10, 3)
                                .HasColumnType("decimal(10,3)");

                            b1.Property<decimal>("Length")
                                .HasPrecision(10, 3)
                                .HasColumnType("decimal(10,3)");

                            b1.Property<decimal>("Volume")
                                .HasPrecision(10, 3)
                                .HasColumnType("decimal(10,3)");

                            b1.Property<decimal>("Weight")
                                .HasPrecision(10, 3)
                                .HasColumnType("decimal(10,3)");

                            b1.Property<decimal>("Width")
                                .HasPrecision(10, 3)
                                .HasColumnType("decimal(10,3)");

                            b1.HasKey("PackageId");

                            b1.ToTable("Packages", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("PackageId");
                        });

                    b.Navigation("Format")
                        .IsRequired();

                    b.Navigation("Items");
                });

            modelBuilder.Entity("GoColis.Shipping.Domain.Logistics.Order.Entities.Track", b =>
                {
                    b.HasOne("GoColis.Shipping.Domain.Logistics.Order.Order", null)
                        .WithMany("Tracks")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("GoColis.Shipping.Domain.Logistics.Order.Order", b =>
                {
                    b.HasOne("GoColis.Shipping.Domain.Member.Carrier.Carrier", "Carrier")
                        .WithMany()
                        .HasForeignKey("CarrierId");

                    b.HasOne("GoColis.Shipping.Domain.Logistics.Insurance.Insurance", "Insurance")
                        .WithMany()
                        .HasForeignKey("InsuranceId");

                    b.HasOne("GoColis.Shipping.Domain.Logistics.Order.Entities.Package", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoColis.Shipping.Domain.Payment.PaymentMethod.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId");

                    b.HasOne("GoColis.Shipping.Domain.Logistics.RelayPoint.RelayPoint", "PickupPoint")
                        .WithMany()
                        .HasForeignKey("PickupPointId");

                    b.HasOne("GoColis.Shipping.Domain.Member.Person.Person", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoColis.Shipping.Domain.Logistics.RelayPoint.RelayPoint", "RelayPoint")
                        .WithMany()
                        .HasForeignKey("RelayPointId");

                    b.HasOne("GoColis.Shipping.Domain.Member.Person.Person", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("GoColis.Shipping.Domain.Logistics.Order.Entities.Payment", "Payments", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(10, 3)
                                .HasColumnType("decimal(10,3)");

                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("PaymentDate")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("datetime2");

                            b1.Property<Guid>("PaymentMethodId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("Id");

                            b1.HasIndex("OrderId");

                            b1.HasIndex("PaymentMethodId");

                            b1.ToTable("Payments", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("OrderId");

                            b1.HasOne("GoColis.Shipping.Domain.Payment.PaymentMethod.PaymentMethod", "PaymentMethod")
                                .WithMany()
                                .HasForeignKey("PaymentMethodId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("PaymentMethod");
                        });

                    b.Navigation("Carrier");

                    b.Navigation("Insurance");

                    b.Navigation("Package");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Payments");

                    b.Navigation("PickupPoint");

                    b.Navigation("Receiver");

                    b.Navigation("RelayPoint");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("GoColis.Shipping.Domain.Logistics.RelayPoint.RelayPoint", b =>
                {
                    b.HasOne("GoColis.Shipping.Domain.Common.Entities.Adress", "Adress")
                        .WithMany()
                        .HasForeignKey("AdressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoColis.Shipping.Domain.Member.Carrier.Carrier", null)
                        .WithMany("RelayPoints")
                        .HasForeignKey("CarrierId");

                    b.OwnsMany("GoColis.Shipping.Domain.Logistics.RelayPoint.Entities.RelayPointSchedule", "RelayPointSchedules", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("DayOfWeek")
                                .HasColumnType("int");

                            b1.Property<DateTime>("EndTime")
                                .HasColumnType("datetime2");

                            b1.Property<Guid>("RelayPointId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("StartTime")
                                .HasColumnType("datetime2");

                            b1.HasKey("Id");

                            b1.HasIndex("RelayPointId");

                            b1.ToTable("RelayPointSchedules", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("RelayPointId");
                        });

                    b.Navigation("Adress");

                    b.Navigation("RelayPointSchedules");
                });

            modelBuilder.Entity("GoColis.Shipping.Domain.Member.Carrier.Carrier", b =>
                {
                    b.HasOne("GoColis.Shipping.Domain.Member.Person.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.OwnsMany("GoColis.Shipping.Domain.Member.Carrier.Entities.RelayPointPrice", "RelayPointPrices", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("CarrierId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("MaxDimension")
                                .HasPrecision(10, 3)
                                .HasColumnType("decimal(10,3)");

                            b1.Property<decimal>("MaxWeight")
                                .HasPrecision(10, 3)
                                .HasColumnType("decimal(10,3)");

                            b1.Property<decimal>("PricePerCubicMeter")
                                .HasPrecision(10, 3)
                                .HasColumnType("decimal(10,3)");

                            b1.Property<decimal>("PricePerKilogram")
                                .HasPrecision(10, 3)
                                .HasColumnType("decimal(10,3)");

                            b1.Property<decimal>("PricePerKilometer")
                                .HasPrecision(10, 3)
                                .HasColumnType("decimal(10,3)");

                            b1.Property<Guid>("RelayPointId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("Id");

                            b1.HasIndex("CarrierId");

                            b1.HasIndex("RelayPointId");

                            b1.ToTable("RelayPointPrices", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("CarrierId");

                            b1.HasOne("GoColis.Shipping.Domain.Logistics.RelayPoint.RelayPoint", "RelayPoint")
                                .WithMany()
                                .HasForeignKey("RelayPointId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("RelayPoint");
                        });

                    b.Navigation("Person");

                    b.Navigation("RelayPointPrices");
                });

            modelBuilder.Entity("GoColis.Shipping.Domain.Member.Person.Person", b =>
                {
                    b.HasOne("GoColis.Shipping.Domain.Common.Entities.Adress", "Adress")
                        .WithMany()
                        .HasForeignKey("AdressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoColis.Shipping.Domain.Authentication.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Adress");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GoColis.Shipping.Domain.Payment.PaymentMethod.PaymentMethod", b =>
                {
                    b.HasOne("GoColis.Shipping.Domain.Member.Carrier.Carrier", null)
                        .WithMany("PaymentMethods")
                        .HasForeignKey("CarrierId");
                });

            modelBuilder.Entity("GoColis.Shipping.Domain.Logistics.Order.Order", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("GoColis.Shipping.Domain.Logistics.RelayPoint.RelayPoint", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("GoColis.Shipping.Domain.Member.Carrier.Carrier", b =>
                {
                    b.Navigation("PaymentMethods");

                    b.Navigation("RelayPoints");
                });

            modelBuilder.Entity("GoColis.Shipping.Domain.Member.Person.Person", b =>
                {
                    b.Navigation("Contacts");
                });
#pragma warning restore 612, 618
        }
    }
}
